---
title: "test code"
---


::: {.column-screen}

# import modules ---------------------------------------------------------------
```{python}
import polars as pl
print('polars version', pl.__version__)
import plotly.express as px
import plotly.graph_objects as go
```


# read solar farm csv ----------------------------------------------------------
```{python}
jp_solar_farms_f_path = "./data/jp_solar_farms/japan_solar_farms.csv"

df_jp_solar = pl.read_csv(jp_solar_farms_f_path, separator=",")
df_jp_solar
```


# create map using px.scatter_mapbox() -----------------------------------------
```python
token = open('./data/mapbox/.mapbox_token').read()

fig = px.scatter_mapbox(
    df_jp_solar,
    lat="latitude",
    lon="longitude",
    size="capacity_mw",
    hover_name="name_english",
    # hover_data=["capacity_mw", "year_operation"],
    # zoom=3,
    # height=1000,
    # animation_frame="h_b_int_num_id",
    # animation_frame="year",
    # hover_name=['h_h_storm_name'],
)

fig.update_layout(
    mapbox_accesstoken=token,
    mapbox_style="light",
    # mapbox_style="outdoors",
    # mapbox_style="basic",
    # mapbox_style="dark",

    # mapbox_style="open-street-map",
    # mapbox_style="carto-darkmatter",
    # mapbox_style="carto-positron",
    # mapbox_zoom=4,
    mapbox_center_lat=36.2048,
    mapbox_center_lon=138.2529,
    margin={"r":0,"t":0,"l":0,"b":0},
    # showlegend=False,
    # legend=dict(
    #     xanchor="right",
    #     yanchor="top",
    #     x=0.07,
    #     y=0.99,
    # ),
)

fig.show()
```


# create map using go.scattermapbox() ------------------------------------------
```python
fig_solar = go.Figure(
    go.Scattermapbox(
        lat=df_jp_solar['latitude'],
        lon=df_jp_solar['longitude'],
        mode='markers',
        marker=go.scattermapbox.Marker(
            size=df_jp_solar['capacity_mw']/10
        ),
        text=df_jp_solar['name_english'],
    )
)

fig_solar.update_layout(
    mapbox=dict(
        accesstoken=token,
        center=go.layout.mapbox.Center(
            lat=36.2048,
            lon=138.2529
        ),
        zoom=3
    )
)

# fig_solar.show()

```

:::


# test, create an empty dataframe with a list of column names
```{python}
keys = ['a', 'b', 'c']
col_names = dict.fromkeys(keys)
df = pl.DataFrame(col_names)
df
```


# create a pl df from schema & data

```{python}
df_schema = {
    'a': pl.Int64,
    'b': pl.String,
    'c': pl.Float64,
}

# data = {
#     'a': 12345,
#     'b': 'abc',
#     'c': 123.45
# }

data = {
    'a': [],
    'b': [],
    'c': [],
}

df2 = pl.DataFrame(data, schema=df_schema)

df2
```

# use `df.vstack` to stack 2 df
```{python}

dict_df3_data = {
    'a': [6299, 54321],
    'b': ['agb', 'bca'],
    'c': [123.45, 43.213]
}
df3 = pl.DataFrame(dict_df3_data)

df2 = df2.vstack(df3)
df2
```


# convert str to yyyymmddhh
```{python}
df_date = pl.DataFrame({
    'date_h_str': ['1987032516', '2021102309'],
    'date_str': ['19780312', '20120103'],
    'speed': [123, 345]
}) 

df_date
```


```{python}
df_date = df_date.with_columns(
    pl.col('date_str')
      .str.strptime(pl.Date, format='%Y%m%d')
      .alias('date')
)

# df_date = df_date.with_columns(
#     pl.col('date_h_str')
#       .str.strptime(pl.Datetime, format='%Y%m%d%h%m%s')
#       .alias('date_hour')
# )

df_date
```


# create test df ---------------------------------------------------------------
```python
df_test = pl.DataFrame(
    {
        'd_lat': [35.0,   43.0,   53.0,   214.0,  215.0,  209.0],
        'd_lon': [1596.0, 1591.0, 1587.0, 1095.0, 1098.0, 1097.0],
        'd_idx': [2301,   2301,   2301,   2316,   2316,   2316]
    }
)
print(df_test)
```

```python
df_test = df_test.with_columns(
    pl.col("d_lat").mul(0.1), 
    pl.col("d_lon").mul(0.1)
)
print(df_test)
```


---

# read parquet file
```{python}
import polars as pl
pl.Config.set_tbl_rows(7)   # limit num of lines for table preview

df_parquet_f_path = "./data/processed/df_2023.parquet"
df = pl.read_parquet(df_parquet_f_path)
df
```

---

# get the first 14 and the last 16 rows from df 
```{python}
df_2307 = df.filter(pl.col('h_b_int_num_id') == 2307)
df_2307 = df_2307[[12, 13, 14], :]
df_2307 
```

```{python}
df_2303 = df.filter(pl.col('h_b_int_num_id') == 2303)
df_2303 = df_2303[[12, 13, 14], :]
df_2303
```

---

# merge the 2 df
```{python}
df_selected = pl.concat([df_2307, df_2303])
df_selected
```

